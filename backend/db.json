[{"model": "posts.topic", "pk": "Algorithm", "fields": {}}, {"model": "posts.topic", "pk": "Django", "fields": {}}, {"model": "posts.topic", "pk": "Java", "fields": {}}, {"model": "posts.topic", "pk": "algorithm", "fields": {}}, {"model": "posts.topic", "pk": "android", "fields": {}}, {"model": "posts.topic", "pk": "big-o", "fields": {}}, {"model": "posts.topic", "pk": "c", "fields": {}}, {"model": "posts.topic", "pk": "c#", "fields": {}}, {"model": "posts.topic", "pk": "c++", "fields": {}}, {"model": "posts.topic", "pk": "computer-science", "fields": {}}, {"model": "posts.topic", "pk": "ios", "fields": {}}, {"model": "posts.topic", "pk": "javascript", "fields": {}}, {"model": "posts.topic", "pk": "jquery", "fields": {}}, {"model": "posts.topic", "pk": "python", "fields": {}}, {"model": "posts.topic", "pk": "sql", "fields": {}}, {"model": "posts.topic", "pk": "time-complexity", "fields": {}}, {"model": "contenttypes.contenttype", "pk": 1, "fields": {"app_label": "admin", "model": "logentry"}}, {"model": "contenttypes.contenttype", "pk": 2, "fields": {"app_label": "auth", "model": "group"}}, {"model": "contenttypes.contenttype", "pk": 3, "fields": {"app_label": "auth", "model": "permission"}}, {"model": "contenttypes.contenttype", "pk": 4, "fields": {"app_label": "auth", "model": "user"}}, {"model": "contenttypes.contenttype", "pk": 5, "fields": {"app_label": "contenttypes", "model": "contenttype"}}, {"model": "contenttypes.contenttype", "pk": 6, "fields": {"app_label": "sessions", "model": "session"}}, {"model": "contenttypes.contenttype", "pk": 7, "fields": {"app_label": "posts", "model": "topic"}}, {"model": "contenttypes.contenttype", "pk": 8, "fields": {"app_label": "posts", "model": "post"}}, {"model": "contenttypes.contenttype", "pk": 9, "fields": {"app_label": "posts", "model": "answer"}}, {"model": "contenttypes.contenttype", "pk": 10, "fields": {"app_label": "users", "model": "account"}}, {"model": "contenttypes.contenttype", "pk": 11, "fields": {"app_label": "posts", "model": "comment"}}, {"model": "sessions.session", "pk": "15z4vfucopwlybiweleinxrk407q1hju", "fields": {"session_data": "ZGI0Y2NiZjkyNTJmZTFiNzU0YWYzZjM4ODQyNjQzYzkwZTI0OGZjNjp7Il9hdXRoX3VzZXJfaGFzaCI6IjZmZmQxY2M4YzZkNGJhNjEwYzljODkzMTMxYmI4ZDhlMzNiNmQ1Y2EiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=", "expire_date": "2017-10-29T17:04:11.798Z"}}, {"model": "sessions.session", "pk": "hpoy6jg027yjzktiad565ian9u6me6pa", "fields": {"session_data": "MjQ1NTAwYWIzY2QzMTM5ZGRmODBjNWRlOTExNmQzYTdkN2VmNWVjMzp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI2ZmZkMWNjOGM2ZDRiYTYxMGM5Yzg5MzEzMWJiOGQ4ZTMzYjZkNWNhIn0=", "expire_date": "2017-11-05T08:58:02.885Z"}}, {"model": "sessions.session", "pk": "snf282d5z6dq036nm5341slzbzqwdd4v", "fields": {"session_data": "ZGI0Y2NiZjkyNTJmZTFiNzU0YWYzZjM4ODQyNjQzYzkwZTI0OGZjNjp7Il9hdXRoX3VzZXJfaGFzaCI6IjZmZmQxY2M4YzZkNGJhNjEwYzljODkzMTMxYmI4ZDhlMzNiNmQ1Y2EiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=", "expire_date": "2017-11-05T12:18:00.880Z"}}, {"model": "auth.permission", "pk": 1, "fields": {"name": "Can add log entry", "content_type": 1, "codename": "add_logentry"}}, {"model": "auth.permission", "pk": 2, "fields": {"name": "Can change log entry", "content_type": 1, "codename": "change_logentry"}}, {"model": "auth.permission", "pk": 3, "fields": {"name": "Can delete log entry", "content_type": 1, "codename": "delete_logentry"}}, {"model": "auth.permission", "pk": 4, "fields": {"name": "Can add group", "content_type": 2, "codename": "add_group"}}, {"model": "auth.permission", "pk": 5, "fields": {"name": "Can change group", "content_type": 2, "codename": "change_group"}}, {"model": "auth.permission", "pk": 6, "fields": {"name": "Can delete group", "content_type": 2, "codename": "delete_group"}}, {"model": "auth.permission", "pk": 7, "fields": {"name": "Can add permission", "content_type": 3, "codename": "add_permission"}}, {"model": "auth.permission", "pk": 8, "fields": {"name": "Can change permission", "content_type": 3, "codename": "change_permission"}}, {"model": "auth.permission", "pk": 9, "fields": {"name": "Can delete permission", "content_type": 3, "codename": "delete_permission"}}, {"model": "auth.permission", "pk": 10, "fields": {"name": "Can add user", "content_type": 4, "codename": "add_user"}}, {"model": "auth.permission", "pk": 11, "fields": {"name": "Can change user", "content_type": 4, "codename": "change_user"}}, {"model": "auth.permission", "pk": 12, "fields": {"name": "Can delete user", "content_type": 4, "codename": "delete_user"}}, {"model": "auth.permission", "pk": 13, "fields": {"name": "Can add content type", "content_type": 5, "codename": "add_contenttype"}}, {"model": "auth.permission", "pk": 14, "fields": {"name": "Can change content type", "content_type": 5, "codename": "change_contenttype"}}, {"model": "auth.permission", "pk": 15, "fields": {"name": "Can delete content type", "content_type": 5, "codename": "delete_contenttype"}}, {"model": "auth.permission", "pk": 16, "fields": {"name": "Can add session", "content_type": 6, "codename": "add_session"}}, {"model": "auth.permission", "pk": 17, "fields": {"name": "Can change session", "content_type": 6, "codename": "change_session"}}, {"model": "auth.permission", "pk": 18, "fields": {"name": "Can delete session", "content_type": 6, "codename": "delete_session"}}, {"model": "auth.permission", "pk": 19, "fields": {"name": "Can add topic", "content_type": 7, "codename": "add_topic"}}, {"model": "auth.permission", "pk": 20, "fields": {"name": "Can change topic", "content_type": 7, "codename": "change_topic"}}, {"model": "auth.permission", "pk": 21, "fields": {"name": "Can delete topic", "content_type": 7, "codename": "delete_topic"}}, {"model": "auth.permission", "pk": 22, "fields": {"name": "Can add post", "content_type": 8, "codename": "add_post"}}, {"model": "auth.permission", "pk": 23, "fields": {"name": "Can change post", "content_type": 8, "codename": "change_post"}}, {"model": "auth.permission", "pk": 24, "fields": {"name": "Can delete post", "content_type": 8, "codename": "delete_post"}}, {"model": "auth.permission", "pk": 25, "fields": {"name": "Can add answer", "content_type": 9, "codename": "add_answer"}}, {"model": "auth.permission", "pk": 26, "fields": {"name": "Can change answer", "content_type": 9, "codename": "change_answer"}}, {"model": "auth.permission", "pk": 27, "fields": {"name": "Can delete answer", "content_type": 9, "codename": "delete_answer"}}, {"model": "auth.permission", "pk": 28, "fields": {"name": "Can add account", "content_type": 10, "codename": "add_account"}}, {"model": "auth.permission", "pk": 29, "fields": {"name": "Can change account", "content_type": 10, "codename": "change_account"}}, {"model": "auth.permission", "pk": 30, "fields": {"name": "Can delete account", "content_type": 10, "codename": "delete_account"}}, {"model": "auth.permission", "pk": 31, "fields": {"name": "Can add comment", "content_type": 11, "codename": "add_comment"}}, {"model": "auth.permission", "pk": 32, "fields": {"name": "Can change comment", "content_type": 11, "codename": "change_comment"}}, {"model": "auth.permission", "pk": 33, "fields": {"name": "Can delete comment", "content_type": 11, "codename": "delete_comment"}}, {"model": "auth.user", "pk": 1, "fields": {"password": "pbkdf2_sha256$36000$q9jprexiWUm0$LYqTkLCSDsGqE9Fk0/4hqu47PuuNnMaCHY0+FIYFONE=", "last_login": "2017-10-22T12:18:00.878Z", "is_superuser": true, "username": "admin", "first_name": "", "last_name": "", "email": "admin@edufirst.com", "is_staff": true, "is_active": true, "date_joined": "2017-10-07T08:26:15.060Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 2, "fields": {"password": "pbkdf2_sha256$36000$NiGDkcQMXEAO$je9E2YWx8nwKJFIjyvn1L57JIdfiuC17I3LYcuJV2eQ=", "last_login": "2017-10-08T16:25:24.838Z", "is_superuser": false, "username": "blaisepascal", "first_name": "Blaise", "last_name": "Pascal", "email": "", "is_staff": false, "is_active": true, "date_joined": "2017-10-07T13:12:58Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 3, "fields": {"password": "pbkdf2_sha256$36000$2M7mGa3omNWJ$IPoWB5VF73Wubh766+t/7jF7WUJ7PNyJkf+tTS1QEaM=", "last_login": "2017-10-08T15:47:33.078Z", "is_superuser": false, "username": "janeausten", "first_name": "Jane", "last_name": "Austen", "email": "", "is_staff": false, "is_active": true, "date_joined": "2017-10-07T13:25:52Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 4, "fields": {"password": "pbkdf2_sha256$36000$Tb01Cw5hbRpT$BAKsrq5bQZbVRg+WHiy2tFZe42ZYyXrA6Qhfy4yY4iU=", "last_login": "2017-10-21T06:38:33.386Z", "is_superuser": false, "username": "cuishengping", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2017-10-07T13:29:59.938Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 5, "fields": {"password": "pbkdf2_sha256$36000$qPYiuaH0rnlA$d3MyKRlTanenp9cgGbGki+PU50kvO8OutXcflhXqIsw=", "last_login": "2017-10-13T04:56:31.432Z", "is_superuser": false, "username": "csmaster", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2017-10-13T04:56:31.224Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 6, "fields": {"password": "pbkdf2_sha256$36000$mwx996DTyuyy$Mi4R2OgVF8Jx8kyQ132SLE5RBKNEewsJikSO2ANtEKk=", "last_login": "2017-10-13T08:10:49.105Z", "is_superuser": false, "username": "Edsger W. Dijkstra", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2017-10-13T08:10:48.904Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 7, "fields": {"password": "pbkdf2_sha256$36000$h5nBoCjJsS8K$6P++ws6c6k+K8GM6HNGQNu5pgh4Z6Xt+pQLJ47g6QJM=", "last_login": "2017-10-22T03:59:13.350Z", "is_superuser": false, "username": "tedmosby", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2017-10-22T03:54:59.070Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 8, "fields": {"password": "pbkdf2_sha256$36000$zjWcEOK1tgkm$uS4c7pueT6WqOozSq36wYbOSJyYuWf2RcjbvB077dpI=", "last_login": "2017-10-22T03:57:30.945Z", "is_superuser": false, "username": "wiltchamberlain", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2017-10-22T03:57:30.737Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 9, "fields": {"password": "pbkdf2_sha256$36000$racCkQtdempw$wqHRaKdy41w88xQ6V/yWGP5agOvzo+0DcvkphWTzk0U=", "last_login": "2017-10-22T08:38:13.687Z", "is_superuser": false, "username": "Yiqi", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2017-10-22T08:38:13.617Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 10, "fields": {"password": "pbkdf2_sha256$36000$xpCO7tWxdUQ6$nLX1Y5SATRvQVeg+CJs9pna4G/xSIJZcbqCmzVVv1kk=", "last_login": null, "is_superuser": false, "username": "Yaman", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2017-10-22T10:12:04.361Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 11, "fields": {"password": "pbkdf2_sha256$36000$WfSBprRj2z43$Tnlx41OKEdZxb8v/itDjaKXBTvtfacukQl3q1Ctsh78=", "last_login": null, "is_superuser": false, "username": "Ziji", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2017-10-22T10:12:15.745Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 12, "fields": {"password": "pbkdf2_sha256$36000$rnKmvcUbyqbV$VYa7+qmCn5jTQ8LcTxkW7G/zzwk4lxQL9sCCxSuenJ0=", "last_login": null, "is_superuser": false, "username": "Hailin", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2017-10-22T10:12:29.332Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 13, "fields": {"password": "pbkdf2_sha256$36000$yQSKXJ6DYAwb$rv3Cbyp/sAbuoXhQk/vFnD7Tgv79yidZlinPSk53D30=", "last_login": null, "is_superuser": false, "username": "Jiahui", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2017-10-22T10:13:30.643Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 14, "fields": {"password": "pbkdf2_sha256$36000$mo5qCHsK4TLY$XFm0YpccnoHwmum4vM/8NKk9gCOwCOFaaHw5v8FHSQk=", "last_login": null, "is_superuser": false, "username": "Jingyi", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2017-10-22T10:13:41.760Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 15, "fields": {"password": "pbkdf2_sha256$36000$qWBBcIQvTuAU$ftsNW0t3LS1WlUqPxekSz9EiI39dbsY20RIYbtVtHng=", "last_login": null, "is_superuser": false, "username": "Shengping", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2017-10-22T10:13:53.500Z", "groups": [], "user_permissions": []}}, {"model": "admin.logentry", "pk": 1, "fields": {"action_time": "2017-10-07T13:13:55.148Z", "user": 1, "content_type": 4, "object_id": "2", "object_repr": "blaisepascal", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"first_name\", \"last_name\"]}}]"}}, {"model": "admin.logentry", "pk": 2, "fields": {"action_time": "2017-10-07T13:26:26.101Z", "user": 1, "content_type": 4, "object_id": "3", "object_repr": "janeausten", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"first_name\", \"last_name\"]}}]"}}, {"model": "admin.logentry", "pk": 3, "fields": {"action_time": "2017-10-08T05:03:38.029Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "Topic object", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 4, "fields": {"action_time": "2017-10-08T15:47:04.414Z", "user": 1, "content_type": 8, "object_id": "2", "object_repr": "Post object", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 5, "fields": {"action_time": "2017-10-13T03:01:44.196Z", "user": 1, "content_type": 7, "object_id": "3", "object_repr": "Topic object", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 6, "fields": {"action_time": "2017-10-13T03:02:01.596Z", "user": 1, "content_type": 8, "object_id": "4", "object_repr": "Post object", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 7, "fields": {"action_time": "2017-10-13T03:58:13.074Z", "user": 1, "content_type": 7, "object_id": "Java", "object_repr": "Topic object", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 8, "fields": {"action_time": "2017-10-13T03:58:27.789Z", "user": 1, "content_type": 8, "object_id": "4", "object_repr": "Post object", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"topics\"]}}]"}}, {"model": "admin.logentry", "pk": 9, "fields": {"action_time": "2017-10-13T03:58:53.210Z", "user": 1, "content_type": 8, "object_id": "4", "object_repr": "Post object", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"topics\"]}}]"}}, {"model": "admin.logentry", "pk": 10, "fields": {"action_time": "2017-10-13T04:45:51.651Z", "user": 1, "content_type": 8, "object_id": "4", "object_repr": "Post object", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"topics\"]}}]"}}, {"model": "admin.logentry", "pk": 11, "fields": {"action_time": "2017-10-13T04:46:02.196Z", "user": 1, "content_type": 8, "object_id": "4", "object_repr": "Post object", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"topics\"]}}]"}}, {"model": "admin.logentry", "pk": 12, "fields": {"action_time": "2017-10-13T04:59:40.027Z", "user": 1, "content_type": 9, "object_id": "1", "object_repr": "Answer object", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 13, "fields": {"action_time": "2017-10-13T06:55:56.353Z", "user": 1, "content_type": 9, "object_id": "1", "object_repr": "Answer object", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"post\"]}}]"}}, {"model": "admin.logentry", "pk": 14, "fields": {"action_time": "2017-10-13T07:43:48.045Z", "user": 1, "content_type": 10, "object_id": "1", "object_repr": "Account object", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 15, "fields": {"action_time": "2017-10-13T07:44:48.310Z", "user": 1, "content_type": 10, "object_id": "2", "object_repr": "csmaster-Computer Science", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 16, "fields": {"action_time": "2017-10-13T07:45:03.714Z", "user": 1, "content_type": 10, "object_id": "3", "object_repr": "janeausten-Literature", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 17, "fields": {"action_time": "2017-10-13T07:47:03.618Z", "user": 1, "content_type": 10, "object_id": "4", "object_repr": "cuishengping-None", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 18, "fields": {"action_time": "2017-10-13T08:11:05.340Z", "user": 1, "content_type": 10, "object_id": "5", "object_repr": "Edsger W. Dijkstra-Computer Science", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"certificate\"]}}]"}}, {"model": "admin.logentry", "pk": 19, "fields": {"action_time": "2017-10-13T08:17:58.577Z", "user": 1, "content_type": 11, "object_id": "1", "object_repr": "This question is ridiculous.", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 20, "fields": {"action_time": "2017-10-13T08:19:00.487Z", "user": 1, "content_type": 11, "object_id": "2", "object_repr": "If Mr. Dijsktra said so..", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 21, "fields": {"action_time": "2017-10-13T08:42:29.737Z", "user": 1, "content_type": 10, "object_id": "6", "object_repr": "admin-God", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 22, "fields": {"action_time": "2017-10-13T08:55:40.549Z", "user": 1, "content_type": 9, "object_id": "2", "object_repr": "Not sure about the number of d", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 23, "fields": {"action_time": "2017-10-13T08:56:20.084Z", "user": 1, "content_type": 9, "object_id": "1", "object_repr": "We're doing load testing now. ", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"votes_total\"]}}]"}}, {"model": "admin.logentry", "pk": 24, "fields": {"action_time": "2017-10-22T09:10:35.533Z", "user": 1, "content_type": 7, "object_id": "algorithm", "object_repr": "algorithm", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 25, "fields": {"action_time": "2017-10-22T09:10:44.656Z", "user": 1, "content_type": 7, "object_id": "computer-science", "object_repr": "computer-science", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 26, "fields": {"action_time": "2017-10-22T09:11:01.959Z", "user": 1, "content_type": 7, "object_id": "time-complexity", "object_repr": "time-complexity", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 27, "fields": {"action_time": "2017-10-22T09:11:14.239Z", "user": 1, "content_type": 7, "object_id": "big-o", "object_repr": "big-o", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 28, "fields": {"action_time": "2017-10-22T09:11:18.365Z", "user": 1, "content_type": 8, "object_id": "8", "object_repr": "What is a plain English explan", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 29, "fields": {"action_time": "2017-10-22T09:13:36.450Z", "user": 1, "content_type": 9, "object_id": "5", "object_repr": "Quick note, this is almost cer", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 30, "fields": {"action_time": "2017-10-22T09:13:51.574Z", "user": 1, "content_type": 9, "object_id": "5", "object_repr": "The simplest definition I can ", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"body\"]}}]"}}, {"model": "admin.logentry", "pk": 31, "fields": {"action_time": "2017-10-22T09:16:07.350Z", "user": 1, "content_type": 7, "object_id": "ios", "object_repr": "ios", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 32, "fields": {"action_time": "2017-10-22T09:16:16.859Z", "user": 1, "content_type": 7, "object_id": "android", "object_repr": "android", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 33, "fields": {"action_time": "2017-10-22T09:16:21.705Z", "user": 1, "content_type": 7, "object_id": "sql", "object_repr": "sql", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 34, "fields": {"action_time": "2017-10-22T09:16:24.509Z", "user": 1, "content_type": 7, "object_id": "c", "object_repr": "c", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 35, "fields": {"action_time": "2017-10-22T09:16:32.512Z", "user": 1, "content_type": 7, "object_id": "javascript", "object_repr": "javascript", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 36, "fields": {"action_time": "2017-10-22T09:17:14.084Z", "user": 1, "content_type": 7, "object_id": "java", "object_repr": "java", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 37, "fields": {"action_time": "2017-10-22T09:17:21.462Z", "user": 1, "content_type": 7, "object_id": "c#", "object_repr": "c#", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 38, "fields": {"action_time": "2017-10-22T09:17:32.446Z", "user": 1, "content_type": 7, "object_id": "python", "object_repr": "python", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 39, "fields": {"action_time": "2017-10-22T09:18:07.692Z", "user": 1, "content_type": 7, "object_id": "java", "object_repr": "java", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 40, "fields": {"action_time": "2017-10-22T09:18:44.760Z", "user": 1, "content_type": 7, "object_id": "c++", "object_repr": "c++", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 41, "fields": {"action_time": "2017-10-22T09:18:49.980Z", "user": 1, "content_type": 7, "object_id": "jquery", "object_repr": "jquery", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 42, "fields": {"action_time": "2017-10-22T09:20:45.688Z", "user": 1, "content_type": 8, "object_id": "9", "object_repr": "How do I return the response f", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 43, "fields": {"action_time": "2017-10-22T09:22:32.034Z", "user": 1, "content_type": 9, "object_id": "6", "object_repr": "Synchronous\r\nImagine you make ", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 44, "fields": {"action_time": "2017-10-22T09:25:47.306Z", "user": 1, "content_type": 8, "object_id": "10", "object_repr": "JavaScript closure inside loop", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 45, "fields": {"action_time": "2017-10-22T09:26:38.917Z", "user": 1, "content_type": 8, "object_id": "11", "object_repr": "Event binding on dynamically c", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 46, "fields": {"action_time": "2017-10-22T09:27:41.523Z", "user": 1, "content_type": 8, "object_id": "12", "object_repr": "How to access the correct `thi", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 47, "fields": {"action_time": "2017-10-22T09:46:02.715Z", "user": 1, "content_type": 9, "object_id": "7", "object_repr": "Try:\r\n\r\nvar funcs = [];\r\n\r\nfor", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 48, "fields": {"action_time": "2017-10-22T09:46:46.656Z", "user": 1, "content_type": 9, "object_id": "8", "object_repr": "As of jQuery 1.7 you should us", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 49, "fields": {"action_time": "2017-10-22T09:49:15.387Z", "user": 1, "content_type": 9, "object_id": "9", "object_repr": "this (aka \"the context\") is a ", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 50, "fields": {"action_time": "2017-10-22T09:51:05.098Z", "user": 1, "content_type": 8, "object_id": "13", "object_repr": "What is a NullPointerException", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 51, "fields": {"action_time": "2017-10-22T09:51:44.920Z", "user": 1, "content_type": 8, "object_id": "14", "object_repr": "How do I compare strings in Ja", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 52, "fields": {"action_time": "2017-10-22T09:52:05.738Z", "user": 1, "content_type": 8, "object_id": "15", "object_repr": "Is Java \u201cpass-by-reference\u201d or", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 53, "fields": {"action_time": "2017-10-22T09:52:33.988Z", "user": 1, "content_type": 8, "object_id": "16", "object_repr": "The Use of Multiple JFrames: G", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 54, "fields": {"action_time": "2017-10-22T09:54:53.509Z", "user": 1, "content_type": 9, "object_id": "10", "object_repr": "I'd like to counter the \"not u", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 55, "fields": {"action_time": "2017-10-22T09:55:32.266Z", "user": 1, "content_type": 9, "object_id": "11", "object_repr": "I just noticed you referenced ", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 56, "fields": {"action_time": "2017-10-22T09:56:06.592Z", "user": 1, "content_type": 9, "object_id": "12", "object_repr": "up vote\r\n537\r\ndown vote\r\n== te", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 57, "fields": {"action_time": "2017-10-22T09:56:35.509Z", "user": 1, "content_type": 9, "object_id": "13", "object_repr": "NullPointerExceptions are exce", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 58, "fields": {"action_time": "2017-10-22T10:12:04.574Z", "user": 1, "content_type": 4, "object_id": "10", "object_repr": "Yaman", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 59, "fields": {"action_time": "2017-10-22T10:12:15.949Z", "user": 1, "content_type": 4, "object_id": "11", "object_repr": "Ziji", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 60, "fields": {"action_time": "2017-10-22T10:12:29.549Z", "user": 1, "content_type": 4, "object_id": "12", "object_repr": "Hailin", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 61, "fields": {"action_time": "2017-10-22T10:13:30.843Z", "user": 1, "content_type": 4, "object_id": "13", "object_repr": "Jiahui", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 62, "fields": {"action_time": "2017-10-22T10:13:41.948Z", "user": 1, "content_type": 4, "object_id": "14", "object_repr": "Jingyi", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 63, "fields": {"action_time": "2017-10-22T10:13:53.687Z", "user": 1, "content_type": 4, "object_id": "15", "object_repr": "Shengping", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 64, "fields": {"action_time": "2017-10-22T10:17:46.079Z", "user": 1, "content_type": 8, "object_id": "17", "object_repr": "Random number generator only g", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 65, "fields": {"action_time": "2017-10-22T10:18:16.812Z", "user": 1, "content_type": 9, "object_id": "14", "object_repr": "Every time you do new Random()", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 66, "fields": {"action_time": "2017-10-22T10:19:38.566Z", "user": 1, "content_type": 8, "object_id": "18", "object_repr": "How do I fix android.os.Networ", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 67, "fields": {"action_time": "2017-10-22T11:02:01.630Z", "user": 1, "content_type": 9, "object_id": "15", "object_repr": "You should almost always run n", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 68, "fields": {"action_time": "2017-10-22T11:06:30.009Z", "user": 1, "content_type": 8, "object_id": "19", "object_repr": "How do I test one variable aga", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 69, "fields": {"action_time": "2017-10-22T11:07:12.431Z", "user": 1, "content_type": 8, "object_id": "20", "object_repr": "Understanding Python's slice n", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 70, "fields": {"action_time": "2017-10-22T11:08:18.426Z", "user": 1, "content_type": 8, "object_id": "21", "object_repr": "Asking the user for input unti", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 71, "fields": {"action_time": "2017-10-22T11:11:12.648Z", "user": 1, "content_type": 8, "object_id": "22", "object_repr": "List of lists changes reflecte", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 72, "fields": {"action_time": "2017-10-22T11:11:48.536Z", "user": 1, "content_type": 8, "object_id": "23", "object_repr": "How to clone or copy a list?", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 73, "fields": {"action_time": "2017-10-22T11:12:32.800Z", "user": 1, "content_type": 8, "object_id": "24", "object_repr": "How do I pass a variable by re", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 74, "fields": {"action_time": "2017-10-22T11:13:40.694Z", "user": 1, "content_type": 8, "object_id": "25", "object_repr": "How do you split a list into e", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 75, "fields": {"action_time": "2017-10-22T11:15:12.553Z", "user": 1, "content_type": 8, "object_id": "26", "object_repr": "What does the \u201cyield\u201d keyword ", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 76, "fields": {"action_time": "2017-10-22T11:15:54.949Z", "user": 1, "content_type": 8, "object_id": "27", "object_repr": "What does ** (double star/aste", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 77, "fields": {"action_time": "2017-10-22T11:17:02.259Z", "user": 1, "content_type": 8, "object_id": "28", "object_repr": "Short Description of the Scopi", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 78, "fields": {"action_time": "2017-10-22T11:29:46.087Z", "user": 1, "content_type": 9, "object_id": "16", "object_repr": "Actually, a concise rule for P", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 79, "fields": {"action_time": "2017-10-22T11:35:38.267Z", "user": 1, "content_type": 9, "object_id": "17", "object_repr": "Essentially, the only thing in", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 80, "fields": {"action_time": "2017-10-22T11:36:04.829Z", "user": 1, "content_type": 9, "object_id": "18", "object_repr": "The scoping rules for Python 2", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 81, "fields": {"action_time": "2017-10-22T11:37:11.444Z", "user": 1, "content_type": 9, "object_id": "19", "object_repr": "A slightly more complete examp", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 82, "fields": {"action_time": "2017-10-22T11:46:11.363Z", "user": 1, "content_type": 9, "object_id": "20", "object_repr": "The *args and **kwargs is a co", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 83, "fields": {"action_time": "2017-10-22T11:48:09.817Z", "user": 1, "content_type": 9, "object_id": "21", "object_repr": "It's also worth noting that yo", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 84, "fields": {"action_time": "2017-10-22T11:49:12.442Z", "user": 1, "content_type": 9, "object_id": "22", "object_repr": "The single * means that there ", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 85, "fields": {"action_time": "2017-10-22T11:50:34.203Z", "user": 1, "content_type": 9, "object_id": "23", "object_repr": "Think of it this way:\r\n\r\nAn it", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 86, "fields": {"action_time": "2017-10-22T11:50:57.747Z", "user": 1, "content_type": 9, "object_id": "24", "object_repr": "yield is just like return - it", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 87, "fields": {"action_time": "2017-10-22T11:51:33.712Z", "user": 1, "content_type": 9, "object_id": "25", "object_repr": "There's one extra thing to men", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 88, "fields": {"action_time": "2017-10-22T12:18:35.886Z", "user": 1, "content_type": 9, "object_id": "12", "object_repr": "tests object references, .equa", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"body\"]}}]"}}, {"model": "admin.logentry", "pk": 89, "fields": {"action_time": "2017-10-22T12:24:45.621Z", "user": 1, "content_type": 10, "object_id": "10", "object_repr": "Hailin-MachineLearning", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 90, "fields": {"action_time": "2017-10-22T12:25:14.147Z", "user": 1, "content_type": 10, "object_id": "11", "object_repr": "Jingyi-Kotlin", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 91, "fields": {"action_time": "2017-10-22T12:25:55.967Z", "user": 1, "content_type": 10, "object_id": "12", "object_repr": "Yaman-Algorithm", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 92, "fields": {"action_time": "2017-10-22T12:30:59.426Z", "user": 1, "content_type": 10, "object_id": "13", "object_repr": "Jiahui-Business", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 93, "fields": {"action_time": "2017-10-22T12:32:08.395Z", "user": 1, "content_type": 10, "object_id": "14", "object_repr": "Shengping-None", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 94, "fields": {"action_time": "2017-10-22T12:34:42.240Z", "user": 1, "content_type": 10, "object_id": "15", "object_repr": "Ziji-Computer Science", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "posts.comment", "pk": 1, "fields": {"body": "This question is ridiculous.", "pub_date": "2017-10-13T00:00:00Z", "author": 6, "post": 4}}, {"model": "posts.comment", "pk": 2, "fields": {"body": "If Mr. Dijsktra said so..", "pub_date": "2017-10-13T02:18:46Z", "author": 5, "post": 4}}, {"model": "posts.comment", "pk": 3, "fields": {"body": "Please please ignore my answers below", "pub_date": "2017-10-14T15:06:40.961Z", "author": 1, "post": 4}}, {"model": "posts.answer", "pk": 1, "fields": {"body": "We're doing load testing now. We think we can support 240 concurrent requests (a sustained rate of 120 hits per second 24x7) without any significant degradation in the server performance. That would be 432,000 hits per hour. Response times aren't small (our transactions are large) but there's no degradation from our baseline performance as the load increases.\r\n\r\nWe're using Apache front-ending Django and MySQL. The OS is Red Hat Enterprise Linux (RHEL). 64-bit. We use mod_wsgi in daemon mode for Django. We've done no cache or database optimization other than to accept the defaults.\r\n\r\nWe're all in one VM on a 64-bit Dell with (I think) 32Gb RAM.\r\n\r\nSince performance is almost the same for 20 or 200 concurrent users, we don't need to spend huge amounts of time \"tweaking\". Instead we simply need to keep our base performance up through ordinary SSL performance improvements, ordinary database design and implementation (indexing, etc.), ordinary firewall performance improvements, etc.\r\n\r\nWhat we do measure is our load test laptops struggling under the insane workload of 15 processes running 16 concurrent threads of requests.", "pub_date": "2017-10-13T00:00:00Z", "author": 5, "post": 4, "votes_total": 13}}, {"model": "posts.answer", "pk": 2, "fields": {"body": "Not sure about the number of daily visits but here are a few examples of large Django sites:\r\n\r\ndisqus.com (talk from djangocon)\r\nbitbucket.org (write up)\r\nlanyrd.com (source)\r\nsupport.mozilla.com (source code)\r\naddons.mozilla.org (source code) (talk from djangocon)\r\ntheonion.com (write up)\r\nThe guardian.co.uk comment system uses Django (source)\r\ninstagram\r\npinterest\r\nrdio\r\nScreencast on how to deploy django with scaling in mind http://ontwik.com/python/django-deployment-workshop-by-jacob-kaplan-moss/\r\n\r\nHere is a link to list of high traffic Django sites on Quora.", "pub_date": "2017-10-13T01:55:26Z", "author": 2, "post": 4, "votes_total": 2}}, {"model": "posts.answer", "pk": 3, "fields": {"body": "I seems to know nothing about this subject.", "pub_date": "2017-10-14T09:16:36.169Z", "author": 1, "post": 4, "votes_total": 0}}, {"model": "posts.answer", "pk": 4, "fields": {"body": "Please ignore my answer", "pub_date": "2017-10-14T15:05:21.421Z", "author": 1, "post": 4, "votes_total": 0}}, {"model": "posts.answer", "pk": 5, "fields": {"body": "The simplest definition I can give for Big-O notation is this:\r\nBig-O notation is a relative representation of the complexity of an algorithm.\r\nThere are some important and deliberately chosen words in that sentence:\r\n-- relative: you can only compare apples to apples. You can't compare an algorithm to do arithmetic multiplication to an algorithm that sorts a list of integers. But a comparison of two algorithms to do arithmetic operations (one multiplication, one addition) will tell you something meaningful;\r\n-- representation: Big-O (in its simplest form) reduces the comparison between algorithms to a single variable. That variable is chosen based on observations or assumptions. For example, sorting algorithms are typically compared based on comparison operations (comparing two nodes to determine their relative ordering). This assumes that comparison is expensive. But what if comparison is cheap but swapping is expensive? It changes the comparison; and\r\n-- complexity: if it takes me one second to sort 10,000 elements how long will it take me to sort one million? Complexity in this instance is a relative measure to something else.", "pub_date": "2017-08-01T09:13:25Z", "author": 8, "post": 8, "votes_total": 10}}, {"model": "posts.answer", "pk": 6, "fields": {"body": "Synchronous\r\nImagine you make a phone call to a friend and ask him to look something up for you. Although it might take a while, you wait on the phone and stare into space, until your friend gives you the answer that you needed.\r\nThe same is happening when you make a function call containing \"normal\" code:\r\nfunction findItem() {\r\n    var item;\r\n    while(item_not_found) {\r\n        // search\r\n    }\r\n    return item;\r\n}\r\n\r\nvar item = findItem();\r\n\r\n// Do something with item\r\ndoSomethingElse();\r\nEven though findItem might take a long time to execute, any code coming after var item = findItem(); has to wait until the function returns the result.\r\n\r\nAsynchronous\r\nYou call your friend again for the same reason. But this time you tell him that you are in a hurry and he should call you back on your mobile phone. You hang up, leave the house and do whatever you planned to do. Once your friend calls you back, you are dealing with the information he gave to you.\r\nThat's exactly what's happening when you do an Ajax request.\r\nfindItem(function(item) {\r\n    // Do something with item\r\n});\r\ndoSomethingElse();\r\nInstead of waiting for the response, the execution continues immediately and the statement after the Ajax call is executed. To get the response eventually, you provide a function to be called once the response was received, a callback (notice something? call back ?). Any statement coming after that call is executed before the callback is called.", "pub_date": "2017-10-22T23:21:08Z", "author": 4, "post": 9, "votes_total": 42}}, {"model": "posts.answer", "pk": 7, "fields": {"body": "Try:\r\n\r\nvar funcs = [];\r\n\r\nfor (var i = 0; i < 3; i++) {\r\n    funcs[i] = (function(index) {\r\n        return function() {\r\n            console.log(\"My value: \" + index);\r\n        };\r\n    }(i));\r\n}\r\nfor (var j = 0; j < 3; j++) {\r\n    funcs[j]();\r\n}", "pub_date": "2017-08-23T23:04:40Z", "author": 5, "post": 10, "votes_total": 30}}, {"model": "posts.answer", "pk": 8, "fields": {"body": "As of jQuery 1.7 you should use jQuery.fn.on:\r\n\r\n$(staticAncestors).on(eventName, dynamicChild, function() {});\r\nPrior to this, the recommended approach was to use live():\r\n\r\n$(selector).live( eventName, function(){} );\r\nHowever, live() was deprecated in 1.7 in favour of on(), and completely removed in 1.9. The live() signature:\r\n\r\n$(selector).live( eventName, function(){} );\r\n... can be replaced with the following on() signature:\r\n\r\n$(document).on( eventName, selector, function(){} );\r\nFor example, if your page was dynamically creating elements with the class name dosomething you would bind the event to a parent which already exists, often document.\r\n\r\n$(document).on('mouseover mouseout', '.dosomething', function(){\r\n    // what you want to happen when mouseover and mouseout \r\n    // occurs on elements that match '.dosomething'\r\n});\r\nAny parent that exists at the time the event is bound is fine. For example\r\n\r\n$('.buttons').on('click', 'button', function(){\r\n    // do something here\r\n});\r\nwould apply to\r\n\r\n<div class=\"buttons\">\r\n    <!-- <button>s that are generated dynamically and added here -->\r\n</div>", "pub_date": "2017-07-22T09:26:40Z", "author": 4, "post": 11, "votes_total": 0}}, {"model": "posts.answer", "pk": 9, "fields": {"body": "this (aka \"the context\") is a special keyword inside each function and its value only depends on how the function was called, not how/when/where it was defined. It is not affected by lexical scope, like other variables. Here are some examples:\r\n\r\nfunction foo() {\r\n    console.log(this);\r\n}\r\n\r\n// normal function call\r\nfoo(); // `this` will refer to `window`\r\n\r\n// as object method\r\nvar obj = {bar: foo};\r\nobj.bar(); // `this` will refer to `obj`\r\n\r\n// as constructor function\r\nnew foo(); // `this` will refer to an object that inherits from `foo.prototype`\r\n\r\nTo learn more about this, have a look at the MDN documentation.", "pub_date": "2017-10-22T09:49:00Z", "author": 4, "post": 12, "votes_total": 9}}, {"model": "posts.answer", "pk": 10, "fields": {"body": "I'd like to counter the \"not user friendly\" argument with an example that I have just been involved with.\r\n\r\nIn our application we have a main window where the users run various 'programs' as separate tabs. As much as possible we have tried to keep our application to this single window.\r\n\r\nOne of the 'programs' they run presents a list of reports that have been generated by the system, and the user can click on an icon on each line to pop open a report viewer dialog. This viewer is showing the equivalent of the portrait/landscape A4 page(s) of the report, so the users like this window to be quite big, almost filling their screens.\r\n\r\nA few months ago we started getting requests from our customers to make these report viewer windows modeless, so that they could have multiple reports open at the same time.\r\n\r\nFor some time I resisted this request as I did not think this was a good solution. However, my mind was changed when I found out how the users were getting around this 'deficiency' of our system.\r\n\r\nThey were opening a viewer, using the 'Save As' facility to save the report as a PDF to a specific directory, using Acrobat Reader to open the PDF file, and then they would do the same with the next report. They would have multiple Acrobat Readers running with the various report outputs that they wanted to look at.\r\n\r\nSo I relented and made the viewer modeless. This means that each viewer has a task-bar icon.\r\n\r\nWhen the latest version was released to them last week, the overwhelming response from them is that they LOVE it. It's been one of our most popular recent enhancements to the system.\r\n\r\nSo you go ahead and tell your users that what they want is bad, but ultimately it won't do you any favours.\r\n\r\nSOME NOTES:\r\n\r\nIt seems to be best practice to use JDialog's for these modeless windows\r\nUse the constructors that use the new ModalityType rather than the boolean modal argument. This is what gives these dialogs the task-bar icon.\r\nFor modeless dialogs, pass a null parent to the constructor, but locate them relative to their 'parent' window.\r\nVersion 6 of Java on Windows has a bug which means that your main window can become 'always on top' without you telling it. Upgrade to version 7 to fix this", "pub_date": "2017-10-22T09:54:19Z", "author": 4, "post": 16, "votes_total": 31}}, {"model": "posts.answer", "pk": 11, "fields": {"body": "I just noticed you referenced my article.\r\n\r\nThe Java Spec says that everything in Java is pass-by-value. There is no such thing as \"pass-by-reference\" in Java.\r\n\r\nThe key to understanding this is that something like\r\n\r\nDog myDog;\r\nis not a Dog; it's actually a pointer to a Dog.\r\n\r\nWhat that means, is when you have\r\n\r\nDog myDog = new Dog(\"Rover\");\r\nfoo(myDog);\r\nyou're essentially passing the address of the created Dog object to the foo method.\r\n\r\n(I say essentially because Java pointers aren't direct addresses, but it's easiest to think of them that way)\r\n\r\nSuppose the Dog object resides at memory address 42. This means we pass 42 to the method.\r\n\r\nif the Method were defined as\r\n\r\npublic void foo(Dog someDog) {\r\n    someDog.setName(\"Max\");     // AAA\r\n    someDog = new Dog(\"Fifi\");  // BBB\r\n    someDog.setName(\"Rowlf\");   // CCC\r\n}\r\nlet's look at what's happening.\r\n\r\nthe parameter someDog is set to the value 42\r\nat line \"AAA\"\r\nsomeDog is followed to the Dog it points to (the Dog object at address 42)\r\nthat Dog (the one at address 42) is asked to change his name to Max\r\nat line \"BBB\"\r\na new Dog is created. Let's say he's at address 74\r\nwe assign the parameter someDog to 74\r\nat line \"CCC\"\r\nsomeDog is followed to the Dog it points to (the Dog object at address 74)\r\nthat Dog (the one at address 74) is asked to change his name to Rowlf\r\nthen, we return\r\nNow let's think about what happens outside the method:\r\n\r\nDid myDog change?\r\n\r\nThere's the key.\r\n\r\nKeeping in mind that myDog is a pointer, and not an actual Dog, the answer is NO. myDog still has the value 42; it's still pointing to the original Dog (but note that because of line \"AAA\", its name is now \"Max\" - still the same Dog; myDog's value has not changed.)\r\n\r\nIt's perfectly valid to follow an address and change what's at the end of it; that does not change the variable, however.\r\n\r\nJava works exactly like C. You can assign a pointer, pass the pointer to a method, follow the pointer in the method and change the data that was pointed to. However, you cannot change where that pointer points.\r\n\r\nIn C++, Ada, Pascal and other languages that support pass-by-reference, you can actually change the variable that was passed.\r\n\r\nIf Java had pass-by-reference semantics, the foo method we defined above would have changed where myDog was pointing when it assigned someDog on line BBB.\r\n\r\nThink of reference parameters as being aliases for the variable passed in. When that alias is assigned, so is the variable that was passed in.", "pub_date": "2017-10-22T09:55:19Z", "author": 5, "post": 15, "votes_total": 23}}, {"model": "posts.answer", "pk": 12, "fields": {"body": "tests object references, .equals() tests the string values.\r\n\r\nSometimes it looks as if == compares values, because Java does some behind-the-scenes stuff to make sure identical in-line strings are actually the same object.\r\n\r\nFor example:\r\n\r\nString fooString1 = new String(\"foo\");\r\nString fooString2 = new String(\"foo\");\r\n\r\n// Evaluates to false\r\nfooString1 == fooString2;\r\n\r\n// Evaluates to true\r\nfooString1.equals(fooString2);\r\n\r\n// Evaluates to true, because Java uses the same object\r\n\"bar\" == \"bar\";\r\nBut beware of nulls!\r\n\r\n== handles null strings fine, but calling .equals() from a null string will cause an exception:\r\n\r\nString nullString1 = null;\r\nString nullString2 = null;\r\n\r\n// Evaluates to true\r\nnullString1 == nullString2;\r\n\r\n// Throws an Exception\r\nnullString1.equals(nullString2);", "pub_date": "2017-10-22T09:55:54Z", "author": 4, "post": 14, "votes_total": 24}}, {"model": "posts.answer", "pk": 13, "fields": {"body": "NullPointerExceptions are exceptions that occur when you try to use a reference that points to no location in memory (null) as though it were referencing an object. Calling a method on a null reference or trying to access a field of a null reference will trigger a NullPointerException. These are the most common, but other ways are listed on the NullPointerException javadoc page.\r\n\r\nProbably the quickest example code I could come up with to illustrate a NullPointerException would be:\r\n\r\npublic class Example {\r\n\r\n    public static void main(String[] args) {\r\n        Object obj = null;\r\n        obj.hashCode();\r\n    }\r\n\r\n}\r\nOn the first line inside main I'm explicitly setting the Object reference obj equal to null. This means I have a reference, but it isn't pointing to any object. After that, I try to treat the reference as though it points to an object by calling a method on it. This results in a NullPointerException because there is no code to execute in the location that the reference is pointing.\r\n\r\n(This is a technicality, but I think it bears mentioning: A reference that points to null isn't the same as a C pointer that points to an invalid memory location. A null pointer is literally not pointing anywhere, which is subtly different than pointing to a location that happens to be invalid.)", "pub_date": "2017-10-22T09:56:24Z", "author": 7, "post": 13, "votes_total": 5}}, {"model": "posts.answer", "pk": 14, "fields": {"body": "Every time you do new Random() it is initialized using the clock. This means that in a tight loop you get the same value lots of times. You should keep a single Random instance and keep using Next on the same instance.\r\n\r\n//Function to get a random number \r\nprivate static readonly Random random = new Random(); \r\nprivate static readonly object syncLock = new object(); \r\npublic static int RandomNumber(int min, int max)\r\n{\r\n    lock(syncLock) { // synchronize\r\n        return random.Next(min, max);\r\n    }\r\n}\r\nEdit (see comments): why do we need a lock here?\r\n\r\nBasically, Next is going to change the internal state of the Random instance. If we do that at the same time from multiple threads, you could argue \"we've just made the outcome even more random\", but what we are actually doing is potentially breaking the internal implementation, and we could also start getting the same numbers from different threads, which might be a problem - and might not. The guarantee of what happens internally is the bigger issue, though; since Random does not make any guarantees of thread-safety. Thus there are two valid approaches:\r\n\r\nsynchronize so that we don't access it at the same time from different threads\r\nuse different Random instances per thread\r\nEither can be fine; but mutexing a single instance from multiple callers at the same time is just asking for trouble.\r\n\r\nThe lock achieves the first (and simpler) of these approaches; however, another approach might be:\r\n\r\nprivate static readonly ThreadLocal<Random> appRandom\r\n     = new ThreadLocal<Random>(() => new Random());\r\nthis is then per-thread, so you don't need to synchronize.", "pub_date": "2017-10-22T10:18:05Z", "author": 12, "post": 17, "votes_total": 9}}, {"model": "posts.answer", "pk": 15, "fields": {"body": "You should almost always run network operations on a thread or as an asynchronous task. But if you know better and are willing to accept the consequences, and must do network operations on the main thread, you can override the default behavior:\r\n\r\nAdd:\r\nStrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();\r\nStrictMode.setThreadPolicy(policy); \r\n\r\nIn your class, and ADD this permission in android manifest.xml file:    \r\n\r\n<uses-permission android:name=\"android.permission.INTERNET\"/>\r\n\r\nConsequences:\r\nYour app will (in areas of spotty internet connection) become unresponsive and lock up, the user perceives slowness and has to do a force kill, and you risk the activity manager killing your app and telling the user that the app has stopped.\r\nAndroid has some good tips on good programming practices to design for responsiveness: http://developer.android.com/reference/android/os/NetworkOnMainThreadException.html", "pub_date": "2017-10-22T10:20:31Z", "author": 15, "post": 18, "votes_total": 10}}, {"model": "posts.answer", "pk": 16, "fields": {"body": "Actually, a concise rule for Python Scope resolution, from Learning Python, 3rd. Ed.. (These rules are specific to variable names, not attributes. If you reference it without a period, these rules apply)\r\n\r\nLEGB Rule.\r\n\r\nL, Local \u2014 Names assigned in any way within a function (def or lambda)), and not declared global in that function.\r\n\r\nE, Enclosing-function locals \u2014 Name in the local scope of any and all statically enclosing functions (def or lambda), from inner to outer.\r\n\r\nG, Global (module) \u2014 Names assigned at the top-level of a module file, or by executing a global statement in a def within the file.\r\n\r\nB, Built-in (Python) \u2014 Names preassigned in the built-in names module : open,range,SyntaxError,...\r\n\r\nSo, in the case of\r\n\r\ncode1\r\nclass Foo:\r\n   code2\r\n   def spam.....\r\n      code3\r\n      for code4..:\r\n       code5\r\n       x()\r\nThe for loop does not have its own namespace. In LEGB order, the scopes would be\r\n\r\nL : local, in def spam (in code3, code 4, code5).\r\n\r\nE : Enclosed function, any enclosing functions (if the whole example were in another def)\r\n\r\nG : Global. Were there any x declared globally in the module (code1)?\r\n\r\nB : Any builtin x in Python.\r\n\r\nx will never be found in code2 (even in cases where you might expect it would)", "pub_date": "2017-09-23T15:29:35Z", "author": 2, "post": 28, "votes_total": 28}}, {"model": "posts.answer", "pk": 17, "fields": {"body": "Essentially, the only thing in Python that introduces a new scope is a function definition. Classes are a bit of a special case in that anything defined directly in the body is placed in the class's namespace, but they are not directly accessible from within the methods (or nested classes) they contain.\r\n\r\nIn your example there are only 3 scopes where x will be searched in:\r\n\r\n-- spam's scope - containing everything defined in code3 and code5 (as well as code4, your loop variable)\r\n-- The global scope - containing everything defined in code1, as well as Foo (and whatever changes after it)\r\n-- The builtins namespace. A bit of a special case - this contains the various Python builtin functions and types such as len() and str(). Generally this shouldn't be modified by any user code, so expect it to contain the standard functions and nothing else.\r\n\r\nMore scopes only appear when you introduce a nested function (or lambda) into the picture. These will behave pretty much as you'd expect however. The nested function can access everything in the local scope, as well as anything in the enclosing function's scope. eg.\r\n\r\ndef foo( ):\r\n    x = 4\r\n    def bar( ):\r\n        print x  # Accesses x from foo's scope\r\n    bar( )  # Prints 4\r\n    x = 5 \r\n    bar( )  # Prints 5\r\n \r\nRestrictions:\r\n\r\nVariables in scopes other than the local function's variables can be accessed, but can't be rebound to new parameters without further syntax. Instead, assignment will create a new local variable instead of affecting the variable in the parent scope. For example:\r\n\r\nglobal_var1 = [ ]\r\nglobal_var2 = 1\r\n\r\ndef func( ):\r\n    # This is OK: It's just accessing, not rebinding\r\n    global_var1.append( 4 ) \r\n\r\n    # This won't affect global_var2. Instead it creates a new variable\r\n    global_var2 = 2 \r\n\r\n    local1 = 4\r\n    def embedded_func( ):\r\n        # Again, this doen't affect func's local1 variable.  It creates a \r\n        # new local variable also called local1 instead.\r\n        local1 = 5\r\n        print local1\r\n\r\n    embedded_func( ) # Prints 5\r\n    print local1    # Prints 4\r\n\r\nIn order to actually modify the bindings of global variables from within a function scope, you need to specify that the variable is global with the global keyword. Eg:\r\n\r\nglobal_var = 4\r\ndef change_global( ):\r\n    global global_var\r\n    global_var = global_var + 1\r\n\r\nCurrently there is no way to do the same for variables in enclosing function scopes, but Python 3 introduces a new keyword, \"nonlocal\" which will act in a similar way to global, but for nested function scopes.", "pub_date": "2017-09-28T11:35:21Z", "author": 5, "post": 28, "votes_total": 18}}, {"model": "posts.answer", "pk": 18, "fields": {"body": "The scoping rules for Python 2.x have been outlined already in other answers. The only thing I would add is that in Python 3.0, there is also the concept of a non-local scope (indicated by the 'nonlocal' keyword). This allows you to access outer scopes directly, and opens up the ability to do some neat tricks, including lexical closures (without ugly hacks involving mutable objects).", "pub_date": "2017-09-20T11:35:55Z", "author": 4, "post": 28, "votes_total": 2}}, {"model": "posts.answer", "pk": 19, "fields": {"body": "A slightly more complete example of scope:\r\n\r\nx = 100\r\nprint \"1. Global x:\", x\r\nclass Test( object ):\r\n    y = x\r\n    print \"2. Enclosed y:\", y\r\n    x = x + 1 \r\n    print \"3. Enclosed x:\", x\r\n    z = x\r\n\r\n    def method( self ):\r\n        print \"4. Enclosed self.x\", self.x\r\n        print \"5. Global x\", x\r\n        try:\r\n            print y\r\n        except NameError, e:\r\n            print \"6.\", e\r\n\r\n    def method_local_ref( self ):\r\n        try:\r\n            print x\r\n        except UnboundLocalError, e:\r\n            print \"7.\", e\r\n        x = 200 \r\n        print \"8. Local x\", x\r\n\r\ninst = Test( )\r\ninst.method( )\r\ninst.method_local_ref( )\r\n\r\noutput:\r\nGlobal x: 100\r\nEnclosed y: 100\r\nEnclosed x: 101\r\nEnclosed self.x 101\r\nGlobal x 100\r\nglobal name 'y' is not defined\r\nlocal variable 'x' referenced before assignment\r\nLocal x 200", "pub_date": "2017-10-04T11:37:03Z", "author": 3, "post": 28, "votes_total": 1}}, {"model": "posts.answer", "pk": 20, "fields": {"body": "The *args and **kwargs is a common idiom to allow arbitrary number of arguments to functions as described in the section more on defining functions in the Python documentation.\r\n\r\nThe *args will give you all function parameters as a tuple:\r\n\r\nIn [1]: def foo(*args):\r\n   ...:     for a in args:\r\n   ...:         print a\r\n   ...:         \r\n   ...:         \r\n\r\nIn [2]: foo(1)\r\n1\r\n\r\nIn [4]: foo(1,2,3)\r\n1\r\n2\r\n3\r\n\r\nThe **kwargs will give you all keyword arguments except for those corresponding to a formal parameter as a dictionary.\r\n\r\nIn [5]: def bar(**kwargs):\r\n   ...:     for a in kwargs:\r\n   ...:         print a, kwargs[a]\r\n   ...:         \r\n   ...:         \r\n\r\nIn [6]: bar(name='one', age=27)\r\nage 27\r\nname one\r\n\r\nBoth idioms can be mixed with normal arguments to allow a set of fixed and some variable arguments:\r\n\r\ndef foo(kind, *args, **kwargs):\r\n   pass", "pub_date": "2017-09-27T11:45:59Z", "author": 8, "post": 27, "votes_total": 16}}, {"model": "posts.answer", "pk": 21, "fields": {"body": "It's also worth noting that you can use * and ** when calling functions as well. This is a shortcut that allows you to pass multiple arguments to a function directly using either a list/tuple or a dictionary. For example, if you have the following function:\r\n\r\ndef foo( x, y, z ) :\r\n    print( \" x = \" + str ( x ) )\r\n    print(  \"y = \" + str ( y ) )\r\n    print( \" z = \" + str ( z ) )\r\n\r\nYou can do things like:\r\n\r\n>>> mylist = [ 1, 2, 3 ]\r\n>>> foo( *mylist )\r\n    x=1\r\n    y=2\r\n    z=3\r\n>>> mydict = { ' x ' : 1, ' y ' : 2, ' z ':  3 }\r\n>>> foo( **mydict )\r\n    x=1\r\n    y=2\r\n    z=3\r\n>>> mytuple = ( 1, 2, 3 )\r\n>>> foo( *mytuple )\r\n    x=1\r\n    y=2\r\n    z=3\r\n\r\nNote: The keys in mydict have to be named exactly like the parameters of function foo. Otherwise it will throw a TypeError.", "pub_date": "2017-10-01T11:47:59Z", "author": 2, "post": 27, "votes_total": 4}}, {"model": "posts.answer", "pk": 22, "fields": {"body": "The single * means that there can be any number of extra positional arguments. foo() can be invoked like foo(1,2,3,4,5). In the body of foo() param2 is a sequence containing 2-5.\r\n\r\nThe double ** means there can be any number of extra named parameters. bar() can be invoked like bar(1, a=2, b=3). In the body of bar() param2 is a dictionary containing {'a':2, 'b':3 }\r\n\r\nWith the following code:\r\n\r\ndef foo( param1, *param2 ) :\r\n    print param1\r\n    print param2\r\n\r\ndef bar( param1, **param2 ) :\r\n    print param1\r\n    print param2\r\n\r\nfoo( 1, 2, 3, 4, 5 )\r\nbar(1, a = 2, b = 3 )\r\n\r\nthe output is\r\n1\r\n( 2, 3, 4, 5 )\r\n1\r\n{ ' a ': 2,  ' b ' : 3 }", "pub_date": "2017-10-16T11:49:02Z", "author": 5, "post": 27, "votes_total": 1}}, {"model": "posts.answer", "pk": 23, "fields": {"body": "Think of it this way:\r\n\r\nAn iterator is just a fancy sounding term for an object that has a next() method. So a yield-ed function ends up being something like this:\r\n\r\nOriginal version:\r\n\r\ndef some_function( ):\r\n    for i in xrange( 4 ):\r\n        yield i\r\n\r\nfor i in some_function( ):\r\n    print i\r\n\r\nThis is basically what the python interpreter does with the above code:\r\n\r\nclass it:\r\n    def __init__( self ):\r\n        #start at -1 so that we get 0 when we add 1 below.\r\n        self.count = -1\r\n    #the __iter__ method will be called once by the for loop.\r\n    #the rest of the magic happens on the object returned by this method.\r\n    #in this case it is the object itself.\r\n    def __iter__( self ):\r\n        return self\r\n    #the next method will be called repeatedly by the for loop\r\n    #until it raises StopIteration.\r\n    def next( self ):\r\n        self.count += 1\r\n        if self.count < 4:\r\n            return self.count\r\n        else:\r\n            #a StopIteration exception is raised\r\n            #to signal that the iterator is done.\r\n            #This is caught implicitly by the for loop.\r\n            raise StopIteration \r\n\r\ndef some_func( ):\r\n    return it( )\r\n\r\nfor i in some_func( ):\r\n    print i\r\n\r\nFor more insight as to what's happening behind the scenes, the for loop can be rewritten to this:\r\n\r\niterator = some_func( )\r\ntry:\r\n    while 1:\r\n        print iterator.next( )\r\nexcept StopIteration:\r\n    pass\r\n\r\nDoes that make more sense or just confuse you more? :)\r\n\r\nEDIT: I should note that this IS an oversimplification for illustrative purposes. :)\r\nEDIT 2: Forgot to throw the StopIteration exception", "pub_date": "2017-10-19T11:50:22Z", "author": 4, "post": 26, "votes_total": 32}}, {"model": "posts.answer", "pk": 24, "fields": {"body": "yield is just like return - it returns whatever you tell it to. The only difference is that the next time you call the function, execution starts from the last call to the yield statement.\r\n\r\nIn the case of your code, the function get_child_candidates is acting like an iterator so that when you extend your list, it adds one element at a time to the new list.\r\n\r\nlist.extend calls an iterator until it's exhausted. In the case of the code sample you posted, it would be much clearer to just return a tuple and append that to the list.", "pub_date": "2017-10-03T11:50:50Z", "author": 3, "post": 26, "votes_total": 19}}, {"model": "posts.answer", "pk": 25, "fields": {"body": "There's one extra thing to mention: a function that yields doesn't actually have to terminate. I've written code like this:\r\n\r\ndef fib( ):\r\n    last, cur = 0, 1\r\n    while True: \r\n        yield cur\r\n        last, cur = cur, last + cur\r\n\r\nThen I can use it in other code like this:\r\n\r\nfor f in fib( ):\r\n    if some_condition: break\r\n    coolfuncs( f );\r\n\r\nIt really helps simplify some problems, and makes some things easier to work with.", "pub_date": "2017-10-11T11:51:22Z", "author": 7, "post": 26, "votes_total": 16}}, {"model": "posts.post", "pk": 1, "fields": {"title": "Why there is no posts", "body": "No I wonder, why there is no question post on edufirst?", "pub_date": "2017-10-08T15:45:21.282Z", "author": 1, "votes_total": 10, "topics": []}}, {"model": "posts.post", "pk": 3, "fields": {"title": "Which book is better, Pride and Prejudice or Gone with the Wind? ", "body": "Many of my friends recommended this book by some Margaret. Can anyone tell me if it is better than my P&P? ", "pub_date": "2017-10-08T15:49:55.670Z", "author": 3, "votes_total": 16, "topics": []}}, {"model": "posts.post", "pk": 4, "fields": {"title": "Does Django scale?", "body": "I'm building a web application with Django. The reasons I chose Django were:\r\n\r\nI wanted to work with free/open-source tools.\r\nI like Python and feel it's a \"long term\" language, whereas regarding Ruby I wasn't sure, and PHP seemed like a huge hassle to learn.\r\nI'm building a prototype for an idea and wasn't thinking too much about the future. Development speed was the main factor, and I already knew Python.\r\nI knew the migration to Google App Engine would be easier should I choose to do so in the future.\r\nI heard Django was \"nice\".\r\nNow that I'm getting closer to thinking about publishing my work, I start being concerned about scale. The only information I found about the scaling capabilities of Django is provided by the Django team (I'm not saying anything to disregard them, but this is clearly not objective information...).\r\n\r\nMy questions:\r\n\r\nWhat's the \"largest\" site that's built on Django today? (I measure size mostly by user traffic)\r\nCan Django deal with 100,000 users daily, each visiting the site for a couple of hours?\r\nCould a site like Stack Overflow run on Django?", "pub_date": "2017-05-20T06:00:00Z", "author": 4, "votes_total": 2, "topics": ["Algorithm", "Django"]}}, {"model": "posts.post", "pk": 5, "fields": {"title": "What is difference between React native vs React?", "body": "I have started to learn React out of curiosity and wanted to know this. Could not find a satisfactory answer in Google. React and React native seem to have same format. Do they have completely different syntax?", "pub_date": "2017-10-21T06:40:59.090Z", "author": 4, "votes_total": 0, "topics": []}}, {"model": "posts.post", "pk": 6, "fields": {"title": "What is the difference between an architect and an architectural designer?", "body": " Is it just a different title for the same job?", "pub_date": "2017-10-22T04:00:07.670Z", "author": 7, "votes_total": 0, "topics": []}}, {"model": "posts.post", "pk": 7, "fields": {"title": "Where is the search button?", "body": "I want to search a question but I cannot find the fucking button", "pub_date": "2017-10-22T08:38:50.240Z", "author": 9, "votes_total": 2, "topics": []}}, {"model": "posts.post", "pk": 8, "fields": {"title": "What is a plain English explanation of \"Big O\" notation?", "body": "I'd prefer as little formal definition as possible and simple mathematics.", "pub_date": "2017-07-22T15:40:00Z", "author": 9, "votes_total": 0, "topics": ["algorithm", "computer-science", "time-complexity", "big-o"]}}, {"model": "posts.post", "pk": 9, "fields": {"title": "How do I return the response from an asynchronous call?", "body": "I have a function \"foo\" which makes an Ajax request. How can I return the response from \"foo\"?\r\nI tried to return the value from the success callback as well as assigning the response to a local variable inside the function and return that one, but none of those ways actually return the response.\r\nfunction foo() {\r\n    var result;\r\n\r\n    $.ajax({\r\n        url: '...',\r\n        success: function(response) {\r\n            result = response;\r\n            // return response; // <- I tried that one as well\r\n        }\r\n    });\r\n\r\n    return result;\r\n}\r\n\r\nvar result = foo(); // It always ends up being `undefined`.", "pub_date": "2017-07-20T14:24:30Z", "author": 9, "votes_total": 30, "topics": ["javascript"]}}, {"model": "posts.post", "pk": 10, "fields": {"title": "JavaScript closure inside loops - simple practical example", "body": "var funcs = [];\r\nfor (var i = 0; i < 3; i++) {      // let's create 3 functions\r\n  funcs[i] = function() {          // and store them in funcs\r\n    console.log(\"My value: \" + i); // each should log its value.\r\n  };\r\n}\r\nfor (var j = 0; j < 3; j++) {\r\n  funcs[j]();                      // and now let's run each one to see\r\n}\r\n\r\nIt outputs this:\r\n    My value: 3\r\n    My value: 3\r\n    My value: 3\r\nWhereas I'd like it to output:\r\n    My value: 0\r\n    My value: 1\r\n    My value: 2\r\nThe same problem occurs when the delay in running the function is caused by using event listeners:\r\nvar buttons = document.getElementsByTagName(\"button\");\r\nfor (var i = 0; i < buttons.length; i++) {          // let's create 3 functions\r\n  buttons[i].addEventListener(\"click\", function() { // as event listeners\r\n    console.log(\"My value: \" + i);                  // each should log its value.\r\n  });\r\n}\r\n<button>0</button><br>\r\n<button>1</button><br>\r\n<button>2</button>\r\n\r\nWhat's the solution to this basic problem?", "pub_date": "2017-07-05T19:25:26Z", "author": 3, "votes_total": 32, "topics": ["javascript"]}}, {"model": "posts.post", "pk": 11, "fields": {"title": "Event binding on dynamically created elements?", "body": "I have a bit of code where I am looping through all the select boxes on a page and binding a .hover event to them to do a bit of twiddling with their width on mouse on/off.\r\n\r\nThis happens on page ready and works just fine.\r\n\r\nThe problem I have is that any select boxes I add via Ajax or DOM after the initial loop won't have the event bound.\r\n\r\nI have found this plugin (jQuery Live Query Plugin), but before I add another 5k to my pages with a plugin, I want to see if anyone knows a way to do this, either with jQuery directly or by another option.", "pub_date": "2017-06-22T18:26:24Z", "author": 8, "votes_total": 14, "topics": ["javascript"]}}, {"model": "posts.post", "pk": 12, "fields": {"title": "How to access the correct `this` inside a callback?", "body": "I have a constructor function which registers an event handler:\r\nfunction MyConstructor(data, transport) {\r\n    this.data = data;\r\n    transport.on('data', function () {\r\n        alert(this.data);\r\n    });\r\n}\r\n\r\n// Mock transport object\r\nvar transport = {\r\n    on: function(event, callback) {\r\n        setTimeout(callback, 1000);\r\n    }\r\n};\r\n\r\n// called as\r\nvar obj = new MyConstructor('foo', transport);\r\n\r\nHowever, I'm not able to access the data property of the created object inside the callback. It looks like this does not refer to the object that was created but to an other one.\r\n\r\nI also tried to use an object method instead of an anonymous function:\r\nfunction MyConstructor(data, transport) {\r\n    this.data = data;\r\n    transport.on('data', this.alert);\r\n}\r\n\r\nMyConstructor.prototype.alert = function() {\r\n    alert(this.name);\r\n};\r\n\r\nbut it exhibits the same problems.\r\n\r\nHow can I access the correct object?", "pub_date": "2017-08-02T21:32:25Z", "author": 7, "votes_total": 6, "topics": ["javascript"]}}, {"model": "posts.post", "pk": 13, "fields": {"title": "What is a NullPointerException, and how do I fix it?", "body": "What are Null Pointer Exceptions (java.lang.NullPointerException) and what causes them?\r\n\r\nWhat methods/tools can be used to determine the cause so that you stop the exception from causing the program to terminate prematurely?", "pub_date": "2017-08-08T09:50:50Z", "author": 7, "votes_total": 21, "topics": ["Java"]}}, {"model": "posts.post", "pk": 14, "fields": {"title": "How do I compare strings in Java?", "body": "I've been using the == operator in my program to compare all my strings so far. However, I ran into a bug, changed one of them into .equals() instead, and it fixed the bug.\r\nIs == bad? When should it and should it not be used? What's the difference?", "pub_date": "2017-08-17T09:51:35Z", "author": 2, "votes_total": 72, "topics": ["Java"]}}, {"model": "posts.post", "pk": 15, "fields": {"title": "Is Java \u201cpass-by-reference\u201d or \u201cpass-by-value\u201d?", "body": "I always thought Java was pass-by-reference; however I've seen a couple of blog posts (For example, this blog) that claim it's not. I don't think I understand the distinction they're making.\r\n\r\nWhat is the explanation?", "pub_date": "2017-08-17T09:51:59Z", "author": 9, "votes_total": 47, "topics": ["Java"]}}, {"model": "posts.post", "pk": 16, "fields": {"title": "The Use of Multiple JFrames: Good or Bad Practice? [closed]", "body": "I'm developing an application which displays images, and plays sounds from a database. I'm trying to decide whether or not to use a separate JFrame to add images to the database from the GUI.\r\n\r\nI'm just wondering whether it is good practice to use multiple JFrame windows?", "pub_date": "2017-08-31T09:52:25Z", "author": 3, "votes_total": 43, "topics": ["Java"]}}, {"model": "posts.post", "pk": 17, "fields": {"title": "Random number generator only generating one random number", "body": "I have the following function:\r\n\r\n//Function to get random number\r\npublic static int RandomNumber(int min, int max)\r\n{\r\n    Random random = new Random();\r\n    return random.Next(min, max);\r\n}\r\nHow I call it:\r\n\r\nbyte[] mac = new byte[6];\r\nfor (int x = 0; x < 6; ++x)\r\n    mac[x] = (byte)(Misc.RandomNumber((int)0xFFFF, (int)0xFFFFFF) % 256);\r\n\r\nIf I step that loop with the debugger during runtime I get different values (which is what I want). However, if I put a breakpoint two lines below that code, all members of the \"mac\" array have equal value.\r\n\r\nWhy does that happen?", "pub_date": "2017-09-04T10:17:32Z", "author": 10, "votes_total": 58, "topics": ["c#"]}}, {"model": "posts.post", "pk": 18, "fields": {"title": "How do I fix android.os.NetworkOnMainThreadException?", "body": "I got an error while running my Android project for RssReader.\r\n\r\nCode:\r\n\r\nURL url = new URL(urlToRssFeed);\r\nSAXParserFactory factory = SAXParserFactory.newInstance();\r\nSAXParser parser = factory.newSAXParser();\r\nXMLReader xmlreader = parser.getXMLReader();\r\nRssHandler theRSSHandler = new RssHandler();\r\nxmlreader.setContentHandler(theRSSHandler);\r\nInputSource is = new InputSource(url.openStream());\r\nxmlreader.parse(is);\r\nreturn theRSSHandler.getFeed();\r\n\r\nAnd it shows the below error:\r\n\r\nandroid.os.NetworkOnMainThreadException\r\n\r\nHow can I fix this issue?", "pub_date": "2017-10-02T10:19:19Z", "author": 9, "votes_total": 17, "topics": ["android"]}}, {"model": "posts.post", "pk": 19, "fields": {"title": "How do I test one variable against multiple values?", "body": "I'm trying to make a function that will compare multiple variables to an integer and output a string of three letters. I was wondering if there was a way to translate this into Python. So say:\r\n\r\nx = 0\r\ny = 1\r\nz = 3\r\nmylist = [ ]\r\n\r\nif x or y or z == 0 :\r\n    mylist.append(\"c\")\r\nelif x or y or z == 1 :\r\n    mylist.append(\"d\")\r\nelif x or y or z == 2 :\r\n    mylist.append(\"e\")\r\nelif x or y or z == 3 : \r\n    mylist.append(\"f\")\r\nwhich would return a list of\r\n[\"c\", \"d\", \"f\"]\r\n\r\nIs something like this possible?", "pub_date": "2017-06-30T13:06:12Z", "author": 13, "votes_total": 28, "topics": ["python"]}}, {"model": "posts.post", "pk": 20, "fields": {"title": "Understanding Python's slice notation", "body": "I need a good explanation (references are a plus) on Python's slice notation.\r\n\r\nTo me, this notation needs a bit of picking up.\r\n\r\nIt looks extremely powerful, but I haven't quite got my head around it.", "pub_date": "2017-08-16T21:07:00Z", "author": 12, "votes_total": 18, "topics": ["python"]}}, {"model": "posts.post", "pk": 21, "fields": {"title": "Asking the user for input until they give a valid response", "body": "I am writing a program that must accept input from the user.\r\n\r\n#note: Python 2.7 users should use `raw_input`, the equivalent of 3.X's `input`\r\nage = int(input(\"Please enter your age: \"))\r\nif age >= 18: \r\n    print(\"You are able to vote in the United States!\")\r\nelse:\r\n    print(\"You are not able to vote in the United States.\")\r\n\r\nThis works as expected if the user enters sensible data.\r\n\r\nC:\\Python\\Projects> canyouvote.py\r\nPlease enter your age: 23\r\nYou are able to vote in the United States!\r\n\r\nBut if they make a mistake, then it crashes:\r\n\r\nC:\\Python\\Projects> canyouvote.py\r\nPlease enter your age: dickety six\r\nTraceback (most recent call last):\r\n  File \"canyouvote.py\", line 1, in <module>\r\n    age = int(input(\"Please enter your age: \"))\r\nValueError: invalid literal for int() with base 10: 'dickety six'\r\n\r\nInstead of crashing, I would like it to try getting the input again. Like this:\r\n\r\nC:\\Python\\Projects> canyouvote.py\r\nPlease enter your age: dickety six\r\nSorry, I didn't understand that.\r\nPlease enter your age: 26\r\nYou are able to vote in the United States!\r\n\r\nHow can I accomplish this? What if I also wanted to reject values like -1, which is a valid int, but nonsensical in this context?", "pub_date": "2017-08-18T14:08:03Z", "author": 14, "votes_total": 29, "topics": ["python"]}}, {"model": "posts.post", "pk": 22, "fields": {"title": "List of lists changes reflected across sublists unexpectedly", "body": "I needed to create a list of lists in Python, so I typed the following:\r\n\r\nmyList = [ [1] * 4] * 3\r\n\r\nThe list looked like this:\r\n\r\n[ [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1] ]  \r\n\r\nThen I changed one of the innermost values:\r\n\r\nmyList[ 0 ][ 0 ] = 5\r\n\r\nNow my list looks like this:\r\n\r\n[ [5, 1, 1, 1], [5, 1, 1, 1], [5, 1, 1, 1] ]  \r\n\r\nwhich is not what I wanted or expected. Can someone please explain what's going on, and how to get around it?", "pub_date": "2017-08-15T09:10:51Z", "author": 14, "votes_total": 31, "topics": ["python"]}}, {"model": "posts.post", "pk": 23, "fields": {"title": "How to clone or copy a list?", "body": "What are the options to clone or copy a list in Python?\r\n\r\nUsing new_list = my_list then modifies new_list every time my_list changes.\r\nWhy is this?", "pub_date": "2017-08-08T11:13:31Z", "author": 10, "votes_total": 29, "topics": ["python"]}}, {"model": "posts.post", "pk": 24, "fields": {"title": "How do I pass a variable by reference?  Ask Question", "body": "The Python documentation seems unclear about whether parameters are passed by reference or value, and the following code produces the unchanged value 'Original'\r\n\r\nclass PassByReference:\r\n    def __init__(self):\r\n        self.variable = 'Original'\r\n        self.change(self.variable)\r\n        print(self.variable)\r\n\r\n    def change(self, var):\r\n        var = 'Changed'\r\n\r\nIs there something I can do to pass the variable by actual reference?", "pub_date": "2017-10-16T11:12:19Z", "author": 9, "votes_total": 19, "topics": ["python"]}}, {"model": "posts.post", "pk": 25, "fields": {"title": "How do you split a list into evenly sized chunks?", "body": "I have a list of arbitrary length, and I need to split it up into equal size chunks and operate on it. There are some obvious ways to do this, like keeping a counter and two lists, and when the second list fills up, add it to the first list and empty the second list for the next round of data, but this is potentially extremely expensive.\r\nI was wondering if anyone had a good solution to this for lists of any length, e.g. using generators.\r\nI was looking for something useful in itertools but I couldn't find anything obviously useful. Might've missed it, though.", "pub_date": "2017-09-06T18:13:27Z", "author": 10, "votes_total": 13, "topics": ["python"]}}, {"model": "posts.post", "pk": 26, "fields": {"title": "What does the \u201cyield\u201d keyword do?", "body": "What is the use of the yield keyword in Python? What does it do?\r\n\r\nFor example, I'm trying to understand this code1:\r\n\r\ndef _get_child_candidates ( self, distance, min_dist, max_dist ) :\r\n    if self._leftchild and distance - max_dist < self._median :\r\n        yield self._leftchild\r\n    if self._rightchild and distance + max_dist >= self._median :\r\n        yield self._rightchild  \r\n\r\nAnd this is the caller:\r\n\r\nresult, candidates = list( ) , [ self ]\r\nwhile candidates: \r\n    node = candidates.pop( )\r\n    distance = node._get_dist( obj )\r\n    if distance <= max_dist and distance >= min_dist:\r\n        result.extend( node._values )\r\n    candidates.extend( node._get_child_candidates ( distance, min_dist, max_dist ) )\r\nreturn result \r\n\r\nWhat happens when the method _get_child_candidates is called? Is a list returned? A single element? Is it called again? When will subsequent calls stop?", "pub_date": "2017-09-06T11:14:54Z", "author": 11, "votes_total": 45, "topics": ["python"]}}, {"model": "posts.post", "pk": 27, "fields": {"title": "What does ** (double star/asterisk) and * (star/asterisk) do for parameters?", "body": "In the following method definitions, what does the * and ** do for param2?\r\n\r\ndef foo(param1, *param2):\r\ndef bar(param1, **param2):", "pub_date": "2017-10-22T11:15:47Z", "author": 12, "votes_total": 34, "topics": ["python"]}}, {"model": "posts.post", "pk": 28, "fields": {"title": "Short Description of the Scoping Rules?", "body": "What exactly are the Python scoping rules?\r\n\r\nIf I have some code:\r\n\r\ncode1\r\nclass Foo:\r\n   code2\r\n   def spam.....\r\n      code3\r\n      for code4..:\r\n       code5\r\n       x()\r\nWhere is x found? Some possible choices include the list above:\r\n1.  In the enclosing source file\r\n2.  In the class namespace\r\n3.  In the function definition\r\n4.  In the for loop index variable\r\n5.  Inside the for loop\r\n\r\nAlso there is the context during execution, when the function spam is passed somewhere else. And maybe lambda functions pass a bit differently?\r\n\r\nThere must be a simple reference or algorithm somewhere. It's a confusing world for intermediate Python programmers.", "pub_date": "2017-10-05T11:16:55Z", "author": 13, "votes_total": 31, "topics": ["python"]}}, {"model": "users.account", "pk": 1, "fields": {"user": 2, "certificate": "Mathematics", "email": ""}}, {"model": "users.account", "pk": 2, "fields": {"user": 5, "certificate": "Computer Science", "email": ""}}, {"model": "users.account", "pk": 3, "fields": {"user": 3, "certificate": "Literature", "email": ""}}, {"model": "users.account", "pk": 4, "fields": {"user": 4, "certificate": "None", "email": ""}}, {"model": "users.account", "pk": 5, "fields": {"user": 6, "certificate": "Computer Science", "email": ""}}, {"model": "users.account", "pk": 6, "fields": {"user": 1, "certificate": "God", "email": ""}}, {"model": "users.account", "pk": 7, "fields": {"user": 7, "certificate": "None", "email": ""}}, {"model": "users.account", "pk": 8, "fields": {"user": 8, "certificate": "None", "email": "chamberlain100@basketball.com"}}, {"model": "users.account", "pk": 9, "fields": {"user": 9, "certificate": "None", "email": "ashyiqiwang@gmail.com"}}, {"model": "users.account", "pk": 10, "fields": {"user": 12, "certificate": "MachineLearning", "email": "hailin@edufirst.com"}}, {"model": "users.account", "pk": 11, "fields": {"user": 14, "certificate": "Kotlin", "email": "jingyi@gmail.com"}}, {"model": "users.account", "pk": 12, "fields": {"user": 10, "certificate": "Algorithm", "email": "yaman@edufirst.com"}}, {"model": "users.account", "pk": 13, "fields": {"user": 13, "certificate": "Business", "email": "jiahui@edufirst.com"}}, {"model": "users.account", "pk": 14, "fields": {"user": 15, "certificate": "None", "email": "spcui@gmail.com"}}, {"model": "users.account", "pk": 15, "fields": {"user": 11, "certificate": "Computer Science", "email": "ziji@gmail.com"}}]
